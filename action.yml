name: 'Build Multi Arch manifest'
description: 'Composite Action to build multi arch manifest from amd64 & arm64 images and push to Azure and Harbor registries'

inputs:
  version:
    description: 'Version to build'
    required: true
    type: string
  updated_tags:
    description: 'Comma-seperated list of new tags to retag the multi arch image'
    required: true
    type: string
  amd_tag:
    description: 'Tag used to identify the amd image built for this composite action run to include in the multi arch image manifest (Build ID)'
    required: true
    type: string
  arm_tag:
    description: 'Tag used to identify the arm image built for this composite action run to include in the multi arch image manifest (Build ID)'
    required: true
    type: string
  module:
    description: 'Module to build (product, devdb, editions)'
    required: true
    type: string 
  acr:
    description: 'IQGeos Azure container registry server name'
    required: true
    type: string
  registry_username:
    description: 'IQGeos Azure container registry username for logging into Azure'
    required: true
    type: string
  registry_password:
    description: 'IQGeos Azure container registry password for logging into Azure'
    required: true
    type: string
  harbor:
    description: 'IQGeos Harbor container registry server name'
    required: true
    type: string
  harbor_cli_secret:
    description: 'IQGeos Harbor container registry password for logging into Azure'
    required: true
    type: string
  harbor_username:
    description: 'IQGeos Harbor container registry username for logging into Azure'
    required: true
    type: string
  engineering_prefix:
    description: 'Engineering prefix to place multi arch images in ACR & Harbor'
    type: string
    default: devops_sandbox_engineering
  releases_prefix:
    description: 'Releases prefix to place multi arch images in ACR & Harbor'
    type: string
    default: devops_sandbox_releases
  is_release:
    description: 'Whether this is a pre-release or release version'
    type: string

runs:
    using: "composite"
    steps:
      - name: login to container registries
        shell: bash
        run: |
          docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASWORD $ACR
          docker login -u $HARBOR_USERNAME -p $HARBOR_CLI_SECRET $HARBOR
        env:
          HARBOR_CLI_SECRET: ${{ inputs.harbor_cli_secret }}
          HARBOR_USERNAME: ${{ inputs.harbor_username }}
          HARBOR: ${{ inputs.harbor }}
          ACR: ${{ inputs.acr }}
          REGISTRY_USERNAME: ${{ inputs.registry_username }}
          REGISTRY_PASWORD: ${{ inputs.registry_password}}  
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create Version manifest and push to Azure and Harbor engineering registries
        shell: bash
        run: |
            docker manifest create $ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION \
                $ACR/$ENGINEERING_PREFIX/$MODULE:$AMD_TAG \
                $ACR/$ENGINEERING_PREFIX/$MODULE:$ARM_TAG
            docker manifest annotate $ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION \
                $ACR/$ENGINEERING_PREFIX/$MODULE:$AMD_TAG --os linux --arch amd64
            docker manifest annotate $ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION \
                $ACR/$ENGINEERING_PREFIX/$MODULE:$ARM_TAG --os linux --arch arm64
            docker manifest push $ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION
            SOURCE_IMAGE=$ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION
            TARGET_IMAGE=$HARBOR/$ENGINEERING_PREFIX/$MODULE:$VERSION
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
        env:
          VERSION: ${{ inputs.version }}
          AMD_TAG: ${{ inputs.amd_tag }}
          ARM_TAG: ${{ inputs.arm_tag }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          HARBOR: ${{ inputs.harbor }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}
          
      - name: Retag Multi-Arch image for ACR engineering
        shell: bash
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$ACR/$ENGINEERING_PREFIX/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          NEW_TAGS: ${{ inputs.updated_tags }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}

      - name: Retag Multi-Arch image for Harbor engineering
        shell: bash
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$HARBOR/$ENGINEERING_PREFIX/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          HARBOR: ${{ inputs.harbor }}
          NEW_TAGS: ${{ inputs.updated_tags }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}

      - name: Retag Multi-Arch image for ACR releases
        shell: bash
        if: ${{ inputs.is_release == 'true' }}
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$ACR/$RELEASES_PREFIX/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          NEW_TAGS: ${{ inputs.updated_tags }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}
          RELEASES_PREFIX: ${{ inputs.releases_prefix }}

      - name: Retag Multi-Arch image for Harbor releases
        shell: bash
        if: ${{ inputs.is_release == 'true' }}
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$ENGINEERING_PREFIX/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$HARBOR/$RELEASES_PREFIX/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          HARBOR: ${{ inputs.harbor }}
          NEW_TAGS: ${{ inputs.updated_tags }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}
          RELEASES_PREFIX: ${{ inputs.releases_prefix }}
