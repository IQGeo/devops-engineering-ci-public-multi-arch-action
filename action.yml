name: 'build multi arch manifest from amd64 & arm64 images'
description: 'amd64 & arm64 images to create multi arch manifest for deployment'
inputs:
  version:
    required: true
    type: string
  updated_tags:
    description: 'Comma-seperated list of new tags'
    default: 'latest,newest_tag,9.9.999'
  amd_tag:
    type: string
  arm_tag:
    type: string
  module:
    type: string 
  acr:
    type: string
  harbor:
    type: string
  engineering_prefix:
    type: string
    default: devops_sandbox_engineering
  releases_prefix:
    type: string
    default: devops_sandbox_releases
  registry_login_server:
    required: true
    type: string
  registry_username:
    required: true
    type: string
  registry_password:
    required: true
    type: string
  harbor_cli_secret:
    type: string
  harbor_username:
    type: string

runs:
    using: "composite"
    steps:
      - name: login to container registries
        shell: bash
        run: |
          docker login -u $REGISTRY_USERNAME -p $REGISTRY_PASWORD $REGISTRY_LOGIN_SERVER
          docker login -u $HARBOR_USERNAME -p $HARBOR_CLI_SECRET $HARBOR
        env:
          HARBOR_CLI_SECRET: ${{ inputs.harbor_cli_secret }}
          HARBOR_USERNAME: ${{ inputs.harbor_username }}
          HARBOR: ${{ inputs.harbor }}
          REGISTRY_LOGIN_SERVER: ${{ inputs.registry_login_server }}
          REGISTRY_USERNAME: ${{ inputs.registry_username }}
          REGISTRY_PASWORD: ${{ inputs.registry_password}}  
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create Version manifest and push to Azure and Harbor registries
        shell: bash
        run: |
            docker manifest create $ACR/$MODULE:$VERSION \
                $ACR/$MODULE:$AMD_TAG \
                $ACR/$MODULE:$ARM_TAG
            docker manifest annotate $ACR/$MODULE:$VERSION \
                $ACR/$MODULE:$AMD_TAG --os linux --arch amd64
            docker manifest annotate $ACR/$MODULE:$VERSION \
                $ACR/$MODULE:$ARM_TAG --os linux --arch arm64
            docker manifest push $ACR/$MODULE:$VERSION
            SOURCE_IMAGE=$ACR/$MODULE:$VERSION
            TARGET_IMAGE=$HARBOR/$ENGINEERING_PREFIX/$MODULE:$VERSION
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
        env:
          VERSION: ${{ inputs.version }}
          AMD_TAG: ${{ inputs.amd_tag }}
          ARM_TAG: ${{ inputs.arm_tag }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          HARBOR: ${{ inputs.harbor }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}
          
      - name: Retag Multi-Arch image for ACR
        shell: bash
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$ACR/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          NEW_TAGS: ${{ inputs.updated_tags }}

        # add line to push the version to Harbor engineering for pre-release and final builds 
      - name: Retag Multi-Arch image for Harbor engineering
        shell: bash
        if: contains(inputs.updated_tags, 'pre-release') || contains(inputs.updated_tags, 'latest')
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$HARBOR/$ENGINEERING_PREFIX/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          HARBOR: ${{ inputs.harbor }}
          NEW_TAGS: ${{ inputs.updated_tags }}
          ENGINEERING_PREFIX: ${{ inputs.engineering_prefix }}

        # add line to push the version to Harbor releases for final builds 
      - name: Retag Multi-Arch image for Harbor releases
        shell: bash
        if: contains(inputs.updated_tags, 'latest')
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$HARBOR/$RELEASES_PREFIX/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          HARBOR: ${{ inputs.harbor }}
          NEW_TAGS: ${{ inputs.updated_tags }}
          RELEASES_PREFIX: ${{ inputs.releases_prefix }}
