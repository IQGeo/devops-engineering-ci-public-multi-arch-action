name: 'build multi arch manifest from amd64 & arm64 images'
description: 'amd64 & arm64 images to create multi arch manifest for deployment'
inputs:
  version:
    required: true
    type: string
  updated_tags:
    description: 'Comma-seperated list of new tags'
    default: 'latest,newest_tag,9.9.999'
  amd_tag:
    type: string
  arm_tag:
    type: string
  module:
    type: string 
  acr:
    type: string
  registry_login_server:
    required: true
    type: string
  registry_username:
    required: true
    type: string
  registry_password:
    required: true
    type: string  

runs:
    using: "composite"
    steps:
      - name: 'login to ACR'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ inputs.registry_login_server }}
          username: ${{ inputs.registry_username }}
          password: ${{ inputs.registry_password }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Create Latest manifest and push to registry
        shell: bash
        run: |
            docker manifest create $ACR/$MODULE:$VERSION \
                $ACR/$MODULE:$AMD_TAG \
                $ACR/$MODULE:$ARM_TAG
            docker manifest annotate $ACR/$MODULE:$VERSION \
                $ACR/$MODULE:$AMD_TAG --os linux --arch amd64
            docker manifest annotate $ACR/$MODULE:$VERSION \
                $ACR/$MODULE:$ARM_TAG --os linux --arch arm64
            docker manifest push $ACR/$MODULE:$VERSION
        env:
          VERSION: ${{ inputs.version }}
          AMD_TAG: ${{ inputs.amd_tag }}
          ARM_TAG: ${{ inputs.arm_tag }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          
      - name: Retag Multi-Arch image
        run: |
          IFS=',' read -ra TAGS <<< $NEW_TAGS 
          SOURCE_IMAGE=$ACR/$MODULE:$VERSION
          for tag in "${TAGS[@]}"; do
            TARGET_IMAGE=$ACR/$MODULE:$tag
            echo "Retagging $SOURCE_IMAGE -> $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $SOURCE_IMAGE
          done
        env:
          VERSION: ${{ inputs.version }}
          MODULE: ${{ inputs.module }}
          ACR: ${{ inputs.acr }}
          NEW_TAGS: ${{ inputs.updated_tags }}



      # - name: Re-tag images
      #   shell: bash
      #   run: |
      #     for tag in $NEW_TAGS; do
      #       docker buildx imagetools create --tag $NEW_IMAGE_BASE:$tag $OLD_IMAGE 
      #     done
      #   env:
      #     OLD_IMAGE: ${{ inputs.acr }}/${{ inputs.module }}:${{ inputs.version }}
      #     NEW_IMAGE_BASE: ${{ inputs.acr }}/${{ inputs.module }}
      #     NEW_TAGS: ${{ steps.meta.outputs.tags }}
